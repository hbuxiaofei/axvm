var searchIndex = new Map(JSON.parse('[\
["axvm",{"t":"IFKIIRNNNCMNNNNHNNNNNNNNNNNMFFFFPPPGFNOOOONNNNNNNNNNNNNONNNNNNNNNNNNNNNNNOOONNNNNONNNNNNNNNNNNNNNNONNONNNNNNOOONNOOONNNONNNNNNNNNNNNNNNNNNNNNN","n":["AxVCpuRef","AxVM","AxVMHal","AxVMPerCpu","AxVMRef","PagingHandler","boot","borrow","borrow_mut","config","current_time_nanos","ept_root","from","get_devices","get_image_load_region","has_hardware_support","id","into","new","run_vcpu","running","try_from","try_into","type_id","vcpu","vcpu_list","vcpu_num","virt_to_phys","AxVCpuConfig","AxVMConfig","AxVMCrateConfig","VMImageConfig","VMTHostVM","VMTLinux","VMTRTOS","VMType","VmMemConfig","ap_entry","ap_entry","bios_load_addr","bios_load_gpa","bios_path","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bsp_entry","bsp_entry","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","default","default","default","default","default","default","deserialize","deserialize","deserialize","dtb_load_addr","dtb_load_gpa","dtb_path","emu_devices","eq","equivalent","equivalent","equivalent","flags","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from_toml","get_vcpu_affinities_pcpu_ids","gpa","id","image_config","image_location","into","into","into","into","into","into","kernel_load_addr","kernel_load_gpa","kernel_path","memory_regions","name","ramdisk_load_addr","ramdisk_load_gpa","ramdisk_path","serialize","serialize","serialize","size","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id"],"q":[[0,"axvm"],[28,"axvm::config"],[142,"axvm::vm"],[143,"axerrno"],[144,"axvm::hal"],[145,"axvcpu::hal"],[146,"axaddrspace::addr"],[147,"axdevice::device"],[148,"alloc::vec"],[149,"axvcpu::exit"],[150,"core::result"],[151,"core::any"],[152,"core::option"],[153,"serde::de"],[154,"axdevice_base"],[155,"core::fmt"],[156,"alloc::string"],[157,"serde::ser"]],"i":[0,0,0,0,0,3,1,1,1,0,3,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,3,0,0,0,0,23,23,23,0,0,14,22,25,27,25,22,23,27,14,24,25,22,23,27,14,24,25,14,22,22,23,24,25,22,23,24,25,22,23,27,14,24,25,23,24,25,25,27,25,14,23,23,23,23,24,22,23,27,14,24,25,22,23,23,27,14,14,24,25,25,14,24,14,14,25,22,23,27,14,24,25,25,27,25,14,14,25,27,25,23,24,25,24,22,23,24,25,22,23,27,14,24,25,22,23,27,14,24,25,22,23,27,14,24,25],"f":"``````{{{b{ce}}}dfh}{ce{}{}}0`{{}j}{{{b{ce}}}lfh}{cc{}}{{{b{ce}}}nfh}{{{b{ce}}A`Ab}{{d{{Ah{{Af{Ad}}}}}}}fh}{{}Aj}{{{b{ce}}}Abfh}7{Al{{d{{An{ce}}}}}fh}{{{b{ce}}Ab}{{d{B`}}}fh}{{{b{ce}}}Ajfh}{c{{Bb{e}}}{}{}}0{cBd{}}{{{b{ce}}Ab}{{Bh{{Bf{e}}}}}fh}{{{b{ce}}}{{Af{{Bf{e}}}}}fh}7{Bjl}`````````{AlA`}````{ce{}{}}000000000001`{BlBl}{BnBn}{C`C`}{CbCb}{{ce}Cd{}{}}000{{}Bl}{{}Bn}{{}Cf}{{}Al}{{}C`}{{}Cb}{c{{Bb{Bn}}}Ch}{c{{Bb{C`}}}Ch}{c{{Bb{Cb}}}Ch}```{Al{{Ah{Cj}}}}{{BnBn}Aj}{{ce}Aj{}{}}00`{{BlCl}Cn}{{BnCl}Cn}{{CfCl}Cn}{{AlCl}Cn}{{C`Cl}Cn}{{CbCl}Cn}{cc{}}{AbBn}111{CbAl}22{D`{{d{Cb}}}}{Al{{Ah{{Db{Ab{Bh{Ab}}Ab}}}}}}`{AlAb}{AlCf}`{ce{}{}}00000```{Al{{Ah{C`}}}}{AlDd}```{{Bnc}BbDf}{{C`c}BbDf}{{Cbc}BbDf}`5555{c{{Bb{e}}}{}{}}00000000000{cBd{}}00000","D":"I`","p":[[5,"AxVM",0,142],[8,"AxResult",143],[10,"AxVMHal",0,144],[10,"AxVCpuHal",145],[1,"u64"],[8,"HostPhysAddr",146],[5,"AxVmDevices",147],[5,"GuestPhysAddr",146],[1,"usize"],[1,"u8"],[1,"slice"],[5,"Vec",148],[1,"bool"],[5,"AxVMConfig",28],[8,"AxVMRef",0,142],[6,"AxVCpuExitReason",149],[6,"Result",150],[5,"TypeId",151],[8,"AxVCpuRef",0,142],[6,"Option",152],[8,"HostVirtAddr",146],[5,"AxVCpuConfig",28],[6,"VMType",28],[5,"VmMemConfig",28],[5,"AxVMCrateConfig",28],[1,"unit"],[5,"VMImageConfig",28],[10,"Deserializer",153],[5,"EmulatedDeviceConfig",154],[5,"Formatter",155],[8,"Result",155],[1,"str"],[1,"tuple"],[5,"String",156],[10,"Serializer",157]],"r":[[0,142],[1,142],[2,144],[4,142]],"b":[],"c":"OjAAAAAAAAA=","e":"OzAAAAEAAEYACgAIAAEAFgACACsACwA5ABAATgADAFMABQBaAAAAXgAAAHUAAgB5ABUA"}]\
]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
